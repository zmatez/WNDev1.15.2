package com.matez.wildnature.world.generation.biome.features;

import com.matez.wildnature.util.lists.WNBlocks;
import net.minecraft.block.Block;
import net.minecraft.block.BlockState;
import net.minecraft.block.Blocks;

public enum LogType {
    //none
    NONE(Blocks.AIR,Blocks.AIR),

    //vanilla
    OAK(Blocks.OAK_LOG, Blocks.OAK_LEAVES),
    SMALL_OAK(Blocks.OAK_LOG, Blocks.OAK_LEAVES),
    DOUBLE_OAK(Blocks.OAK_LOG, Blocks.OAK_LEAVES),
    BALD_OAK(Blocks.OAK_LOG, Blocks.OAK_LEAVES),
    SEQUOIA(Blocks.OAK_LOG,Blocks.OAK_LEAVES),
    DEAD(Blocks.OAK_LOG,Blocks.OAK_LEAVES),
    BIG_OAK(Blocks.OAK_LOG,Blocks.OAK_LEAVES),
    SPRUCE(Blocks.SPRUCE_LOG, Blocks.SPRUCE_LEAVES),
    BIG_SPRUCE(Blocks.SPRUCE_LOG, Blocks.SPRUCE_LEAVES),
    BIRCH(Blocks.BIRCH_LOG, Blocks.BIRCH_LEAVES),
    SMALL_BIRCH(Blocks.BIRCH_LOG, Blocks.BIRCH_LEAVES),
    JUNGLE(Blocks.JUNGLE_LOG, Blocks.JUNGLE_LEAVES),
    SMALL_JUNGLE(Blocks.JUNGLE_LOG, Blocks.JUNGLE_LEAVES),
    ACACIA(Blocks.ACACIA_LOG, Blocks.ACACIA_LEAVES),
    BIG_ACACIA(Blocks.ACACIA_LOG, Blocks.ACACIA_LEAVES),
    DARK_OAK(Blocks.DARK_OAK_LOG, Blocks.DARK_OAK_LEAVES),
    DOUBLE_DARK_OAK(Blocks.DARK_OAK_LOG, Blocks.DARK_OAK_LEAVES),
    ROOFED(Blocks.DARK_OAK_LOG,Blocks.DARK_OAK_LEAVES),
    SPOOKY(Blocks.DARK_OAK_LOG,Blocks.DARK_OAK_LEAVES),

    //vanilla thick
    SPRUCE_THICK(WNBlocks.SPRUCE_BRANCH, Blocks.SPRUCE_LEAVES),
    BIRCH_THICK(WNBlocks.BIRCH_BRANCH, Blocks.BIRCH_LEAVES),

    //WN deciduous
    ASPEN(Blocks.BIRCH_LOG, WNBlocks.ASPEN_LEAVES),
    WILLOW(WNBlocks.WILLOW_LOG, WNBlocks.WILLOW_LEAVES),
    BAOBAB(WNBlocks.BAOBAB_LOG,WNBlocks.BAOBAB_LEAVES),
    BIG_BAOBAB(WNBlocks.BAOBAB_LOG,WNBlocks.BAOBAB_LEAVES),
    BEECH(WNBlocks.BEECH_LOG,WNBlocks.BEECH_LEAVES),
    PURPLE_BEECH(WNBlocks.BEECH_LOG,WNBlocks.PURPLE_BEECH_LEAVES),
    CEDAR(WNBlocks.CEDAR_LOG,WNBlocks.CEDAR_LEAVES),
    WEEPING_CEDAR(WNBlocks.CEDAR_LOG,Blocks.OAK_LEAVES),
    CYPRESS(WNBlocks.REDWOOD_LOG,Blocks.SPRUCE_LEAVES),
    EBONY(WNBlocks.EBONY_LOG,WNBlocks.EBONY_LEAVES),
    SMALL_EBONY(WNBlocks.EBONY_LOG,WNBlocks.EBONY_LEAVES),
    EUCALYPTUS(WNBlocks.EUCALYPTUS_LOG,WNBlocks.EUCALYPTUS_LEAVES),
    BIG_EUCALYPTUS(WNBlocks.EUCALYPTUS_LOG,WNBlocks.EUCALYPTUS_LEAVES),
    MAHOGANY(WNBlocks.MAHOGANY_LOG,WNBlocks.MAHOGANY_LEAVES),
    PALM(WNBlocks.PALM_LOG,WNBlocks.PALM_LEAVES),
    HORNBEAM(Blocks.OAK_LOG,WNBlocks.HORNBEAM_LEAVES),
    POPLAR(Blocks.OAK_LOG, WNBlocks.POPLAR_LEAVES),
    HAZEL(Blocks.OAK_LOG, WNBlocks.HAZEL_LEAVES),
    MANGROVE(WNBlocks.MANGROVE_LOG,WNBlocks.MANGROVE_LEAVES),
    REDWOOD(WNBlocks.REDWOOD_LOG,WNBlocks.REDWOOD_LEAVES),
    BIG_REDWOOD(WNBlocks.REDWOOD_LOG,WNBlocks.REDWOOD_LEAVES),
    NUYTSIA(WNBlocks.ROSACEAE_LOG,WNBlocks.NUYTSIA_LEAVES),


    MAPLE(WNBlocks.MAPLE_LOG, WNBlocks.MAPLE_LEAVES),
    MAPLE_RED(WNBlocks.MAPLE_LOG, WNBlocks.MAPLE_RED_LEAVES),
    MAPLE_ORANGE(WNBlocks.MAPLE_LOG, WNBlocks.MAPLE_ORANGE_LEAVES),
    MAPLE_BROWN(WNBlocks.MAPLE_LOG, WNBlocks.MAPLE_BROWN_LEAVES),
    MAPLE_YELLOW(WNBlocks.MAPLE_LOG, WNBlocks.MAPLE_YELLOW_LEAVES),

    SEASONAL_BIRCH_RED(Blocks.BIRCH_LOG, WNBlocks.MAPLE_RED_LEAVES),
    SEASONAL_BIRCH_ORANGE(Blocks.BIRCH_LOG, WNBlocks.MAPLE_ORANGE_LEAVES),
    SEASONAL_BIRCH_BROWN(Blocks.BIRCH_LOG, WNBlocks.MAPLE_BROWN_LEAVES),
    SEASONAL_BIRCH_YELLOW(Blocks.BIRCH_LOG, WNBlocks.MAPLE_YELLOW_LEAVES),

    METASEQUOIA_GREEN(WNBlocks.REDWOOD_LOG,WNBlocks.METASEQUOIA_GREEN_LEAVES),
    METASEQUOIA_YELLOW(WNBlocks.REDWOOD_LOG,WNBlocks.METASEQUOIA_YELLOW_LEAVES),
    METASEQUOIA_RED(WNBlocks.REDWOOD_LOG,WNBlocks.METASEQUOIA_RED_LEAVES),
    METASEQUOIA_BROWN(WNBlocks.REDWOOD_LOG,WNBlocks.METASEQUOIA_BROWN_LEAVES),
    METASEQUOIA_ORANGE(WNBlocks.REDWOOD_LOG,WNBlocks.METASEQUOIA_ORANGE_LEAVES),



    //WN deciduous thick
    BEECH_THICK(WNBlocks.BEECH_BRANCH,WNBlocks.BEECH_LEAVES),

    //WN coniferous
    FIR(Blocks.SPRUCE_LOG, WNBlocks.FIR_LEAVES),
    BIG_FIR(Blocks.SPRUCE_LOG, WNBlocks.FIR_LEAVES),
    SILVER_FIR(Blocks.SPRUCE_LOG, WNBlocks.FIR_SILVER_LEAVES),
    PINE(Blocks.SPRUCE_LOG, WNBlocks.PINE_LEAVES),
    BIG_PINE(Blocks.SPRUCE_LOG, WNBlocks.PINE_LEAVES),
    SMALL_PINE(Blocks.SPRUCE_LOG, WNBlocks.PINE_LEAVES),
    BIALOWIEZA(Blocks.DARK_OAK_LOG, Blocks.SPRUCE_LEAVES),
    LARCH(WNBlocks.LARCH_LOG,WNBlocks.LARCH_LEAVES),

    //WN coniferous thick
    PINE_THICK(WNBlocks.SPRUCE_BRANCH, WNBlocks.PINE_LEAVES),


    //WN fruits
    APPLE(WNBlocks.ROSACEAE_LOG, WNBlocks.APPLE_LEAVES),
    PEAR(WNBlocks.ROSACEAE_LOG, WNBlocks.PEAR_LEAVES),
    BANANA(WNBlocks.PALM_LOG, WNBlocks.BANANA_LEAVES),
    CHERRY(WNBlocks.CHERRY_LOG,WNBlocks.CHERRY_LEAVES),
    PINK_CHERRY(WNBlocks.CHERRY_LOG,WNBlocks.CHERRY_PINK_LEAVES),
    WHITE_CHERRY(WNBlocks.CHERRY_LOG,WNBlocks.CHERRY_WHITE_LEAVES),
    SAKURA(WNBlocks.CHERRY_LOG,WNBlocks.CHERRY_WHITE_LEAVES),
    WILD_CHERRY(WNBlocks.CHERRY_LOG,WNBlocks.WILD_CHERRY_LEAVES),
    PLUM(WNBlocks.PLUM_LOG,WNBlocks.PLUM_LEAVES),
    MIRABELLE_PLUM(WNBlocks.PLUM_LOG,WNBlocks.MIRABELLE_PLUM_LEAVES),
    JACARANDA(WNBlocks.JACARANDA_LOG,WNBlocks.JACARANDA_LEAVES),

    ROWAN(Blocks.OAK_LOG,WNBlocks.ROWAN_LEAVES_ORANGE),

    LEMON(WNBlocks.CITRUS_LOG,WNBlocks.LEMON_LEAVES),
    ORANGE(WNBlocks.CITRUS_LOG,WNBlocks.ORANGE_LEAVES),
    POMEGRANATE(WNBlocks.CITRUS_LOG,WNBlocks.POMEGRANATE_LEAVES),
    LIME(WNBlocks.CITRUS_LOG,WNBlocks.LIME_LEAVES),
    MANGO(WNBlocks.CITRUS_LOG,WNBlocks.MANGO_LEAVES),
    OLIVE(WNBlocks.CITRUS_LOG,WNBlocks.OLIVE_LEAVES),
    GRAPEFRUIT(WNBlocks.CITRUS_LOG,WNBlocks.GRAPE_FRUIT_LEAVES),
    PEACH(WNBlocks.CITRUS_LOG,WNBlocks.PEACH_LEAVES),

    FORSYTHIA(WNBlocks.ROSACEAE_LOG, WNBlocks.FORSYTHIA_LEAVES),
    MAGNOLIA(WNBlocks.ROSACEAE_LOG, WNBlocks.MAGNOLIA_LEAVES);

    private final BlockState log, leaves;
    private LogType(BlockState log, BlockState leaves){
        this.log=log;
        this.leaves=leaves;
    }

    private LogType(Block log, Block leaves){
        this.log=log.getDefaultState();
        this.leaves=leaves.getDefaultState();
    }

    public BlockState getLeaves() {
        return leaves;
    }

    public BlockState getLog() {
        return log;
    }
}
